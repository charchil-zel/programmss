Projects: Quiz

Source Code: 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>////to manipulate the terminal output dela
//macro to define the maximum no. of each parameters
#define MAX_QUESTIONS 100
#define MAX_OPTION 4
#define MAX_OPTION_LENGTH 20
#define MAX_ANSWER_LENGTH 20
#define MAX_QUESTION_LENGTH 100
//check if the OS is windows or other 
#ifdef _WIN32
  #define CLEAR_SCREEN "cls"
#else
  #define CLEAR_SCREEN "clear"
#endif

//Structure to save the questions, options and answers generated 
typedef struct {
  char question[MAX_QUESTION_LENGTH],option[MAX_OPTION][MAX_OPTION_LENGTH];
  int answer;
} quiz;
//Declare the functions needed &&pointer *questions is not the same as char questions in the structure and is just the pointer to check around the structure 
//take questions from the file "questions.txt" as initialized in main()
void takequestion(const char *filename, quiz *questions) {
  FILE *file = fopen(filename, "r");
  if (file == NULL) {
    perror("Error Opening File");
    exit(EXIT_FAILURE);
  }
  int i = 0;
  while (fgets(questions[i].question, MAX_QUESTION_LENGTH, file) != NULL &&i < MAX_QUESTIONS) {
    questions[i].question[strcspn(questions[i].question, "\n")] = '\0'; i++;
  } fclose(file);
}
//take questions from the file "options.txt" as initialized in main()
void takeoption(const char *filename, quiz *questions) {
  FILE *file = fopen(filename, "r");
  if (file == NULL) {
    perror("Error Opening File");
    exit(EXIT_FAILURE);
  }
  int i = 0;
  while (i < MAX_QUESTIONS &&
         fscanf(file, "%s %s %s %s", questions[i].option[0],questions[i].option[1], questions[i].option[2],questions[i].option[3]) == 4) {
    i++;
  }

  fclose(file);
}
//take answers from the file "answers.txt" as initialized in main()
void takeanswer(const char *filename, quiz *questions) {
  FILE *file = fopen(filename, "r");
  if (file == NULL) {
    perror("Error Opening File");
    exit(EXIT_FAILURE);
  }

  int i = 0;
  while (fscanf(file, "%d", &questions[i].answer) == 1 && i < MAX_QUESTIONS) {
    i++;
  } fclose(file);
}

//display questions, options .. take and check the answers 
void conductQuiz(quiz *questions, int numQuestions) {
  int score = 0;

  for (int i = 0; i < numQuestions; i++) {
    printf("Question %d: %s\n", i + 1, questions[i].question);

    for (int j = 0; j < MAX_OPTION; j++) {
      printf("%d. %s\n", j + 1, questions[i].option[j]);
    }
    int userAnswer;
    printf("Your answer (1-4): ");
    scanf("%d", &userAnswer);
    if (userAnswer == questions[i].answer) {
      printf("Correct!\n");
      score++;
    } else {
      printf("Incorrect. The correct answer is %d\n", questions[i].answer);
    }
    printf("\n");
  }
  printf("Your final score is %d out of %d\n", score, numQuestions);
}
void credits(void) {//roll up the credits in startup
  system(CLEAR_SCREEN);
  printf("\n\n\n\n\n\n\n\n\n\t\t\t\tPROJECT\n\t\t\t\tQuiz"); sleep(2);
  printf("\n\n\n\n\n\t\t\t\tMADE BY\n\t\t\t     Charchil Neupane"); sleep(2);
  printf("\n\n\n\n\n\t\t\t\tROLL NO\n\t\t\t\t      12"); sleep(2);
  printf("\n\n\n\n\t\t\t\tSECTION\n\t\t\t          M11"); sleep(2);
  printf("\n\n\n\n\t\t\t\tINSTITUTE:Kathmandu Model Secondary School"); sleep(2);
  printf("\n\n\n\n\n\t\t\t\tSUBMITTED TO:Computer Department\n\t\t\t"); sleep(2);
  system(CLEAR_SCREEN);}

int main() {
  credits();
  printf("Welcome to Quiz!\nLet's Start, Shall we?:-)\n");
  quiz questions[MAX_QUESTIONS];
  takequestion("questions.txt", questions);    //function call to store each of the parameters in the structure
  takeoption("options.txt", questions);
  takeanswer("answers.txt", questions);
  int numQuestions = 12;  //initialize the max amount of questions 
  conductQuiz(questions, numQuestions); //function call to display the acutal content 
  return 0; }




############################################################################################################################################################################################

Projects: Hangman

Description 

This project namely "Hangman” is the simple modeling of the game hangman build in C language. This documentation provides an overview of the game, including it’s purpose, design and implementation. 


Source Code:

fun.h
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>////to manipulate the terminal output delay
#ifdef _WIN32
#define CLEAR_SCREEN "cls"
#else
#define CLEAR_SCREEN "clear"
#endif

//function declaration 
int prefrence(char);
void show(int, int);
void page(void);
void title(void);
void inst(void);
void hangman(int, int);
void credits(void);
//Display title at startup 
inline void title(void) {
  printf("--------------------------------------------\n");
  printf("| #  #   #   #   #  #### #   #   #   #   # |\n");
  printf("| #  #  # #  ##  # #     ## ##  # #  ##  # |\n");
  printf("| #### ##### # # # #  ## # # # ##### # # # |\n");
  printf("| #  # #   # #  ## #   # #   # #   # #  ## |\n");
  printf("| #  # #   # #   #  ###  #   # #   # #   # |\n");
  printf("--------------------------------------------\n\n"); }

//instruction to be displayed 
inline void inst(void) {
  system(CLEAR_SCREEN);
  printf("\n\n\n\t\t INSTRUCTIONS \n\t\t ============\n");
  printf("\n   1: HANGMAN IS A GAME WHERE YOU HAVE TO GUESS THE WORD.");
  printf("\n   2: GUESS THE MAXIMUM WORDS FOR THE MAXIMUM SCORE.");
  printf("\n   3: EVERY LEVEL WILL HAVE A NEW WORD.");
  printf("\n   4: 1 CORRECT LETTER = 1 SCORE");
  printf("\n   5: YOU HAVE LIMITED CHANCES TO FIND THE WORD\n\n\n"); sleep(6); 
  system(CLEAR_SCREEN);
  printf("\n\n\n\n\t\t   HOW TO PLAY \n\t\t ===========");
  printf("\nUse your keyboard to guess the word. If you press any letter and the letter is in the word, the game will tell you the position of the letter.\nGuess more, score more.\n\n\t\t\t BEST OF LUCK !");
}
//displays the credits in startup of the program
inline void credits(void) {
  system(CLEAR_SCREEN);
  printf("\n\n\n\n\n\n\n\n\n\t\t\t\tPROJECT\n\t\t\t     HANGMAN ON C"); sleep(2);
  printf("\n\n\n\n\n\t\t\t\tMADE BY\n\t\t\t     Charchil Neupane"); sleep(2);
  printf("\n\n\n\n\n\t\t\t\tROLL NO\n\t\t\t\t      12");sleep(2);
  printf("\n\n\n\n\t\t\t\tSECTION\n\t\t\t          M11"); sleep(2);
  printf("\n\n\n\n\t\t\t\tINSTITUTE:Kathmandu Model Secondary School"); sleep(2);
  printf("\n\n\n\n\n\t\t\t\tSUBMITTED TO:Computer Department\n\t\t\t");  sleep(2);
  system(CLEAR_SCREEN);
}
//The inner page where the player can select the difficulty levels 
inline void page(void) {
  printf("\t\t\t  \n");
  printf("\t\t\t      \n");
  printf("\t\t\t      0 \n");
  printf("\t\t\t     \\|/\n");
  printf("\t\t\t      | \n");
  printf("\t\t\t     / \\\n");
  printf("\t         CAN YOU SAVE ME PLESASE ?  \n\n");
  printf("\n\t\t 1: 3 LETTERS GAME (Beginner) \n\t\t 2: 4 LETTERS GAME (ok i ""guess..) \n\t\t 3: 5 LETTERS GAME (ngl it's pretty hard) \n\n\t\t ""\n\n\t\t 4:MAIN MENU \n\n\t\t choice = ");
}
//the function that prints the ascii art of the hangman according to parameters score entered
inline void show(int a, int score) {
  switch (a) {
  case 1:
  {
    printf("\n\t\t\tAmount of wrong letters: %d\n\n", a);
    printf("  _______\n");
    printf("  |\n");
    printf("  |\n");
    printf("  |\n");
    printf("  |\n");
    printf("  |\n");
    printf("__|_________\n\n");
    printf("\nYour score = %d", score);
    printf("\n\t\t\t\t Chances Left=%d", 5 - a);
  } break;

  case 2:
    printf("\n\t\t\tAmount of wrong letters: %d\n\n", a);
    printf("  _______\n");
    printf("  |/   | \n");
    printf("  |    O \n");
    printf("  |\n");
    printf("  |\n");
    printf("  |\n");
    printf("__|_________\n\n");
    printf("\nYour score = %d", score);
    printf("\n\t\t\t\t Chances Left=%d", 5 - a);

    break;

  case 3:
    printf("\n\t\t\tAmount of wrong letters: %d\n\n", a);
    printf("  _______\n");
    printf("  |/   | \n");
    printf("  |    O \n");
    printf("  |    |\n");
    printf("  |    |\n");
    printf("  |\n");
    printf("__|_________\n\n");
    printf("\nYour score = %d", score);
    break;

  case 4:
    printf("\n\t\t\tAmount of wrong letters: %d\n\n", a);
    printf("  _______\n");
    printf("  |/   | \n");
    printf("  |    O \n");
    printf("  |   \\|/\n");
    printf("  |    | \n");
    printf("  |   /\n");
    printf("__|_________\n\n");
    printf("\nYour score = %d", score);
    printf("\n\t\t\t\t Chances Left=%d", 5 - a);

    break;

  case 5:
    printf("\n\t\t\tAmount of wrong letters: %d\n\n", a);
    printf("  _______\n");
    printf("  |/   | \n");
    printf("  |    X \n");
    printf("  |   \\|/\n");
    printf("  |    | \n");
    printf("  |   / \\\n");
    printf("__|_________\n\n");
    printf("\nTotal score = %d", score);
    printf("\n\t\t\t\t Chances Left=%d", 5 - a);
    printf("\n\nYOU ARE DEAD ! GAME OVER!");

    break;
  }
}
//Scan and display the inner page of the program according to user choices 
inline int prefrence(char a) {
  switch (a) {
  case 'p':
  case 'P':
    system(CLEAR_SCREEN);
    break;

  case 'i':
  case 'I':
    inst();
    break;

  case 'c':
  case 'C':
    credits();
    break;

  default:
    printf("Invalid Input! Try Again.");
  }
  return 0;
}


hang.c
#include "fun.h"
int num,max = 5,y = 0;
char pre;
//Function to select the word according to random index generated and return it 
const char *chooseRandomWord(int a) {
  const char *words3[] = {"top", "rat", "bat", "cat", "man", "hat", "hut","cut", "bit", "pen", "fox", "jog", "zag", "vow","jug", "joy", "zip", "vox", "jew", "fix", "lux","zoo", "vex", "gym", "hex", "joy", "pyx", "jib","wok", "yak", "zap", "box", "coy", "pyx"};
  const char *words4[] = {"four", "page", "home", "girl", "bird", "lamp", "drop", "high", "tick","copy", "zeal", "quay", "void", "jazz", "muck", "fizz", "wisp", "jolt","flux", "vast", "cozy", "myth", "viva", "whiz", "gaze", "judo", "quiz","joey", "flaw", "pave", "jinx", "jump", "ramp", "flux", "zinc", "mazy","knee", "jive", "daze", "luxe", "vole", "haze", "buoy", "zest", "whom","fuzz", "zone", "jaws", "lazy", "twig", "quip", "miff", "zany", "dupe","jeep", "whip", "zero", "milk", "jazz", "bump"};
  const char *words5[] = {"earth", "nokia", "white", "bread", "table", "zebra", "mango", "paris","eagle", "china", "tiger", "vexed", "quark", "blitz", "jumpy", "woven","glaze", "pyxel", "joust", "vivid", "froze", "buzzy", "hymns", "zilch","fjord", "quiff", "cozyy", "quash", "jowar", "pluck", "mirth", "vouch","pyxel", "mazzy", "lived", "quilt", "myths", "zesty", "dummy", "quips","baked", "jiver", "mosey", "vivid", "quiff", "bumps", "zoned", "lazes","jolly", "wrung", "vexes", "vowel", "joust", "flick", "quash", "pyxel","waxen", "zooms", "pluck", "zilch", "boxed"};
  if (a == 1) {//'a' checks the number of character user wants to play with 
    int index = rand() % (sizeof(words3) / sizeof(words3[0])); //generate random index withe the limits from 0 to no. of words declared
    return words3[index];
  }
  if (a == 2) {
    int index = rand() % (sizeof(words3) / sizeof(words3[0]));
    return words4[index];
  }
  if (a == 3) {
    int index = rand() % (sizeof(words3) / sizeof(words3[0]));
    return words5[index];
  }
  return NULL;
}
//displays the words by comparing the each character entered by user 
void displayWord(const char *word, const char *guessedLetters) {
  for (int i = 0; word[i] != '\0'; i++) {
    if (strchr(guessedLetters, word[i]) != NULL) {
      printf("%c", word[i]);
    }
    else {
      printf("_ ");
    }
  }
  printf("\n");
}
int main() {
  char c;
  credits();
again:  puts("\n");
  title();
  printf("\n\t\tP:PLAY \n\t\tI:INSTRUCTIONS \n\t\tC:CREDITS \n\t\tQ:QUIT \n\t\t");
  if (num == 4) {
    while ((c = getchar()) != '\n' && c != EOF);
  }
  pre = getchar();
  if (pre == 'q' || pre == 'Q')
    return 0; 
  prefrence(pre);
  puts("\n\n");
  page();
  scanf("%d", &num);
  srand(time(NULL)); //Provide a seed for the use of rand() function above 
  if (num == 4) {
    system(CLEAR_SCREEN);
    goto again;
  }
  const char *WordToGuess = chooseRandomWord(num);  //initialize pointer char to pass into the choooseRandomWord() 
  int wordLength = strlen(WordToGuess);
  char guessedLetters[wordLength];
  int incorrectGuesses = 0;
  for (int i = 0; i < wordLength; i++) {
    guessedLetters[i] = '_';// intially generate the lower border for word
  }
  while (1) {
    printf("\n");
    displayWord(WordToGuess, guessedLetters);
    char guess;
    printf("Enter a letter: ");
    scanf(" %c", &guess); //clear stream
    if (strchr(WordToGuess, guess) != NULL) {//compare the character entered and to be enter 
      printf("Correct guess!\n");
      y++;
      for (int i = 0; i < wordLength; i++) {//if correct letter is guessed 
        if (WordToGuess[i] == guess) {
          guessedLetters[i] = guess;
        }
      }
    } else {
      printf("Incorrect guesn/ s!\n");
      incorrectGuesses++;
      max -= 1;//reduce the max tries remaining 
      show(incorrectGuesses, y);
      if (max == 0) {                                             // if the max guess reached
        printf("\nThe correct word was: %s\n", WordToGuess);
        break;
      }
    }
    if (strcmp(WordToGuess, guessedLetters) == 0) {
      printf("Congratulations! You guessed the word: %s\n", WordToGuess);// if the whole word was guessed 
      break;
      return 0;
    }
  }  return 0; }


#########################################################################################################################################################################################
Projects: Customer billing system

Description 

This project namely "Customer billing system” is the simple modeling of the restaurant billing sytem build in C language. This documentation provides an overview of the game, including it’s purpose, design and implementation. 

Source Code: 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>//to fetch the current date
//to check the current OS used 
#ifdef _WIN32
#define CLEAR_SCREEN "cls"
#else
#define CLEAR_SCREEN "clear"
#endif

//Declare structures 
struct items {
  char items[100];
  float price;
  int quantity;
};

struct total {
  float total,discount,cs,vat;
};

struct orders {
  char customers[100], date[100];
  int noitems;
};
//generate the bill headers by displaying the required information passed from struct orders...
void generateBillHeader(struct orders *c) {
  printf("\n\n");
  printf("\t    Neupane. Restaurant");
  printf("\n\t   -----------------");
  printf("\nDate:%s", c->date);
  printf("\nInvoice To: %s\n", c->customers);
  printf("---------------------------------------\nItems\t\t");
  printf("Qty\t\tTotal\t\t");
  printf("\n---------------------------------------\n\n");
}
//generate the bill body by displaying the required information passed from struct items...
void generateBillBody(struct items *a) {
  printf("%s\t\t", a->items);
  printf("%d\t\t", a->quantity);
  printf("%.2f\t\t\n", a->quantity * a->price);
}
//calculate and generate the footer of the bill
void generateBillFooter(struct total *t) {
  printf("---------------------------------------\n");
  printf("Sub Total\t\t\t%.2f", t->total);
  printf("\nDiscount @10%s\t\t\t%.2f", "%", t->discount);
  printf("\n\t\t\t\t-------");
  printf("\nNet Total\t\t\t%.2f", t->total - t->discount);
  printf("\nCustomer Service @9%s\t\t%.2f", "%", t->cs);
  printf("\nVat @13%s\t\t\t%.2f", "%", t->vat);
  printf("\n---------------------------------------");
  printf("\nGrand Total\t\t\t%.2f",
         (t->cs + t->vat) + (t->total - t->discount));
  printf("\n---------------------------------------\n");
}

int main() {//call up the main function
  int opt, n;
  char saveBill;
  char name[30];
  int search = 0;
  char choice;

  start: system(CLEAR_SCREEN);
  printf("\t============ADV. RESTAURANT============");
  printf("\n\nPlease select your prefered operation");
  printf("\n\n1.Generate Invoice");
  printf("\n2.Show all Invoices");
  printf("\n3.Search Invoice");
  printf("\n4.Exit");
  printf("\n\nYour choice:\t");
  scanf("%d", &opt);
  
  struct orders ord, orders;
  struct items *item;
  struct total totals;
  switch (opt) {
  case 1:
    system(CLEAR_SCREEN);
    printf("\nPlease enter the name of the customer:\t");
    scanf("%s", ord.customers);
    time_t t = time(NULL);//generate the time by declaring the pointer t
    strftime(ord.date, sizeof(ord.date), "%Y-%m-%d", localtime(&t));//print the current date
    printf("\nPlease Enter the Numer of Item Ordered:\t");
    scanf("%d", &n);
    ord.noitems = n;
    item = malloc(n * sizeof(struct items));//dynamic memory allocation for the items when large no. are collected from the file 
    
    totals.total = 0;
    for (int i = 0; i < n; i++) {
      fgetc(stdin);
      printf("\n\n");
      printf("Please enter the itemno. %d:\t", i + 1);
      scanf("%s", item[i].items);
      printf("Please enter the quantity of items: \t");
      scanf("%d", &item[i].quantity);
      printf("Please enter the unit price: \t");
      scanf("%f", &item[i].price);
      totals.total += item[i].price * item[i].quantity;
    }
  //Calculate service charge, vat and discount as per defined 
    totals.cs = 0.09 * totals.total;
    totals.vat = 0.13 * totals.total;
    totals.discount = 0.10 * totals.total;
    ord.noitems = n;
    generateBillHeader(&ord);//generate header using the above information
    for (int i = 0; i < n; i++) {
      generateBillBody(&item[i]);//generate body from the entered items stored in struct items.. 
    }
    generateBillFooter(&totals);//generate footer by calculating totals
    printf("\nDo you want to save the invoice [y/n]:\t");
    scanf(" %c", &saveBill);
    
    //Save the invoice in the database and write the data into the file in format as per structure for easier to scan the data later 
    if (saveBill == 'y' || saveBill == 'Y') {
      FILE *fp=fopen("bill.dat", "ab");//append binary as .dat is used 
      if (fp == NULL) {
        printf("\n\nError in opening file");
      } else {
        fwrite(&ord, sizeof(struct orders), 1, fp);
        for (int i = 0; i < ord.noitems; i++) {
          fwrite(&item[i], sizeof(struct items), 1, fp);
        }
        fwrite(&totals, sizeof(struct total), 1, fp);
        printf("\nSucessfully Saved the Invoice...::-)\n");
      }
      fclose(fp);
    } free(item);//free memory allocated (otherwise overflow of memory)
    break;
    //generate saved invoices 
  case 2:
    system(CLEAR_SCREEN);
    FILE *fp = fopen("bill.dat", "rb");//read binary from the file in specific format as saved 
    printf("\n *****Your Previous Invoice(s) *****\n");
    while (fread(&ord, sizeof(struct orders), 1, fp)) {
      generateBillHeader(&ord);
      item = malloc(ord.noitems * sizeof(struct items));
      //free(item);
      if (item == NULL) {
        printf("Allocation fail");
        break;
      }
      for (int i = 0; i < ord.noitems; i++) {
        fread(&item[i], sizeof(struct items), 1, fp);
        generateBillBody(&item[i]);
      }
      fread(&totals, sizeof(struct total), 1, fp);
      generateBillFooter(&totals);
    }
    fclose(fp);
    break;

    //Search invoice based on customer name
  case 3:
    printf("Enter the name of the customer to search:\t");
    scanf("%s", name);
    system(CLEAR_SCREEN);
    FILE *fp1 = fopen("bill.dat", "rb");
    printf("\t*****Invoice of %s *****\n", name);
    while (fread(&orders, sizeof(struct orders), 1, fp1) == 1) {
      if (strcmp(orders.customers, name) == 0) {
        generateBillHeader(&orders);
        item = malloc(orders.noitems * sizeof(struct items));
        if (item == NULL) {
          printf("Allocation fail");
          break;
        }
        for (int i = 0; i < orders.noitems; i++) {
          fread(&item[i], sizeof(struct items), 1, fp1);
        }
        fread(&totals, sizeof(struct total), 1, fp1);
        for (int i = 0; i < orders.noitems; i++) {
          generateBillBody(&item[i]);
        }
        generateBillFooter(&totals);
        search++;
        free(item);//free memory
        break;
      }
    }
    if (search == 0) {
      printf("Sorry! The invoice for %s was not found...", name);
    }
    fclose(fp1);
    break;

  case 4:
    printf("\n\t\tThanks for the visit :)\n");
    exit(0);
    break;

  default:
    printf("\n\t\tInvalid choice\n");
  }

  printf("\nDo you want to perfrom another option?[y/n]:\t\n");
  scanf(" %c", &choice); {
    if (choice == 'y' || choice == 'Y') {
      system(CLEAR_SCREEN);
      goto start;
    }
  }
  return 0;
}

 #############################################################################################################################################################################################

Projects: Contact Management System

Description 

This project namely Contact Management System” is the simple modeling of the game quiz build in C language. This documentation provides an overview of the game, including it’s purpose, design and implementation. 

Source Code: 
#include <stdio.h> 
#include <stdlib.h>
#include <unistd.h>////to manipulate the terminal output delay

//Check the working OS 
#ifdef WIN_32
#defineCLEAR_SCREENSCREEN "cls"
#else
#define CLEAR_SCREEN "clear"
#endif
void Credits(void);//display the credits at the startup

//declare the structure to save the data
struct Contact {
  char fName[50], lName[50], address[50], email[50];
  long long phNo;//phone number is long int 
};
//for new user and ->is the arrow operator to save the value in struct Contact using *c

void createContact(struct Contact *c) {
  printf("Enter your first name: ");
  scanf("%s", c->fName);
  printf("Enter your last name: ");
  scanf("%s", c->lName);
  printf("Enter phone: ");
  scanf("%lld", &c->phNo);
  printf("Enter address: ");
  scanf("%s", c->address);
  printf("Enter email: ");
  scanf("%s", c->email);
}
//print contact information
void showContact(struct Contact *c) {
  printf("Name: %s %s\n", c->fName, c->lName);
  printf("Phone: %lld\n", c->phNo);
  printf("Address: %s\n", c->address);
  printf("Email: %s\n", c->email);
}
//save the data in the file 
void writeOnFile() {
  char ch;
  FILE *f1;
  struct Contact c;
  f1 = fopen("CMS.dat", "ab");//append binary as .dat is used
  do {
    createContact(&c);
    fwrite(&c, sizeof(struct Contact), 1, f1);
    printf("Do you have next data? (y/n): ");
    scanf(" %c", &ch);
  } while (ch == 'y' || ch == 'Y');
  printf("Contact has been successfully created...\n");
  fclose(f1); }

//read and display all the saved contact information
void readFromFile() {
  FILE *f2;
  struct Contact c;
  f2 = fopen("CMS.dat", "rb");
  printf("\n================================\n");
  printf("LIST OF CONTACTS\n");
  printf("================================\n");
  while (fread(&c, sizeof(struct Contact), 1, f2) == 1) {
    showContact(&c);
    printf("\n================================\n");
  }
  fclose(f2); }
//search the databased for the user according to saved contact
void searchOnFile() {
  FILE *f3;
  long long phone;
  struct Contact c; 
  printf("Enter phone no.: ");
  scanf("%lld", &phone);
   f3 = fopen("CMS.dat", "rb");
  while (fread(&c, sizeof(struct Contact), 1, f3) == 1) {
    if (phone == c.phNo) {    showContact(&c); }
    else { printf("\n\nNo record not found\n"); } } 
    fclose(f3); }

//if the user is to be deleted from the database
void deleteFromFile() {
  long long num;
  int flag = 0;
  FILE *f4, *f5;
  struct Contact c;
  f5 = fopen("CMS.dat", "rb");
  f4 = fopen("temp.dat", "wb");
  printf("Enter phone no. to delete: ");
  scanf("%lld", &num);
  while (fread(&c, sizeof(struct Contact), 1, f5) == 1) {
    if (c.phNo != num) {
      fwrite(&c, sizeof(struct Contact), 1, f4);
    } else
      flag = 1; }
  fclose(f5);
  fclose(f4);
  remove("CMS.dat");
  rename("temp.dat", "CMS.dat");
  flag == 1 ? printf("\n\n\tContact Deleted...\n") : printf("\n\n\tContact Not Found...\n"); }
  
  //edit the saved contact information
void editContact() {
  long long num;
  FILE *f6;
  struct Contact c;
   printf("Edit contact\n");
  printf("===============================\n\n");
  printf("Enter the phone number to be edited: ");
  scanf("%lld", &num);
   f6 = fopen("CMS.dat", "rb+");
  while (fread(&c, sizeof(struct Contact), 1, f6) == 1) {
    if (c.phNo == num) {
      printf("Enter new record\n");
      createContact(&c);
      long long pos = -1 * sizeof(struct Contact);//declare the position to start of the contact saved (using -1 *)
      fseek(f6, pos, SEEK_CUR);//seek cursor to start of the selected contact using the position defined above
      fwrite(&c, sizeof(struct Contact), 1, f6);//save the edited contact
      printf("\n\n\tContact Successfully Updated...\n");
      fclose(f6);
      return; } }
  printf("\n\nNo record not found\n");
  fclose(f6);
}

void Credits(void) {
  system(CLEAR_SCREEN);
  printf("\n\n\n\n\n\n\n\n\n\t\t\t\tPROJECT\n\t\t\t     Contact Management System"); sleep(2);
  printf("\n\n\n\n\n\t\t\t\tMADE BY\n\t\t\t     Charchil Neupane"); sleep(2);
  printf("\n\n\n\n\n\t\t\t\tROLL NO\n\t\t\t\t      12"); sleep(2);
  printf("\n\n\n\n\t\t\t\tSECTION\n\t\t\t          M11"); sleep(2);
  printf("\n\n\n\n\t\t\t\tINSTITUTE:Kathmandu Model Secondary School"); sleep(2);
  printf("\n\n\n\n\n\t\t\t\tSUBMITTED TO:Computer Department\n\t\t\t"); sleep(2);
  system(CLEAR_SCREEN); }

int main() {
  Credits();
  system(CLEAR_SCREEN);
  printf("\n\n\n\n\n\n\n\n\t\t\t * WELCOME TO CONTACT MANAGEMENT SYSTEM *");
  getchar();
  while (1) {
    int choice;
    system(CLEAR_SCREEN);
    printf("\nCONTACT MANAGEMENT SYSTEM\n");
    printf("\nMAIN MENU\n");
    printf("=====================\n");
    printf("[1] Add a new Contact\n");
    printf("[2] List all Contacts\n");
    printf("[3] Search for contact\n");
    printf("[4] Delete a Contact\n");
    printf("[5] Edit a Contact\n");
    printf("[0] Exit\n");
    printf("=====================\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);
    switch (choice) {
    case 1:
      system(CLEAR_SCREEN);
      writeOnFile();
      break;
    case 2:
      system(CLEAR_SCREEN);
      readFromFile();
     break;
    case 3:
      system(CLEAR_SCREEN);
      searchOnFile();
      break;
    case 4:
      system(CLEAR_SCREEN);
      deleteFromFile();
      break;
    case 5:
      system(CLEAR_SCREEN);
      editContact();
      break;
    case 0:
      system(CLEAR_SCREEN);
      printf("\n\n\n\t\t\tThank you for using CMS.\n\n");
      exit(0);
      break;
    default:
      continue;
    }
    int opt;
    printf("\n\n..::Enter the Choice:\n[1] Main Menu\t\t[0] Exit\n");
    scanf("%d", &opt);
    switch (opt) {
    case 0:
      system(CLEAR_SCREEN);
      printf("\n\n\n\t\t\tThank you for using CMS.\n\n");
      exit(0);
      break;
    default:
      continue;
    } }

  return 0; }

################################################################################################################################################################################################################################################################################################################################################################################################################################
Projects: Tic Tac Toe
Description :This project namely Tic Tac Toe” is the simple modeling of the game tictactoe build in C language. This documentation provides an overview of the game, including it’s purpose, design and implementation. 

Source Code: 
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>//to manipulate the terminal output delay

//Check the running OS 
#ifdef WIN_32
    #defineCLEAR_SCREENSCREEN "cls"

#else
    #define CLEAR_SCREEN "clear"

#endif
////Define the board and name of the player
char board[3][3];
const char PLAYER = 'X';
const char COMPUTER = 'O';

void resetBoard(){
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            board[i][j] = ' ';
        } } }

void printBoard(){
    printf(" %c | %c | %c ", board[0][0], board[0][1], board[0][2]);
    printf("\n---|---|---\n");
    printf(" %c | %c | %c ", board[1][0], board[1][1], board[1][2]);
    printf("\n---|---|---\n");
    printf(" %c | %c | %c ", board[2][0], board[2][1], board[2][2]);
    printf("\n---|---|---\n\n"); }

int checkFreeSpaces() {
    int freeSpaces = 9;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] != ' ') {
                freeSpaces--;
            } } }
    return freeSpaces; }

void playerMove()
{
    int x, y;
    printf("Enter row #(1-3): ");
    scanf("%d", &x); x--;
    printf("Enter column #(1-3): ");
    scanf("%d", &y); y--;
    do {
        if (board[x][y] != ' ') {
            printf("Invalid move try again.\n");
            printBoard();
            playerMove(); }
        else {
            board[x][y] = PLAYER;
            break; }

    } while (board[x][y] == ' '); }


void printWinner(char winner) {
    if (winner == PLAYER) {
        printf("Player Wins!\n"); }
    else if (winner == COMPUTER) {
        printf("Computer Wins!\n"); }
    else {
        printf("It's a tie!\n"); } }

void computerMove() {
    srand(time(0)); int x, y;
    if (checkFreeSpaces() > 0) {
        do {
            x = rand() % 3;
            y = rand() % 3;
        } while (board[x][y] != ' ');
        board[x][y] = COMPUTER; }
    else {
        printWinner(' '); } }

char checkWinner() {
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == board[i][1] && board[i][0] == board[i][2]) {
            return board[i][0]; }
    }

    for (int i = 0; i < 3; i++){
        if (board[0][i] == board[1][i] && board[0][i] == board[2][i]) {
            return board[0][i]; }
    }

    if (board[0][0] == board[1][1] && board[0][0] == board[2][2]) {
        return board[0][0]; }

    if (board[0][2] == board[1][1] && board[0][2] == board[2][0]) {
        return board[0][2]; }
    return ' '; }

void credits() {
    printf("\n\n\n\n\n\n\n\n\n\n\n\t\t\t\tPROJECT\n\t\t\t     Tic Tac Toe ON C"); system(CLEAR_SCREEN);
    printf("\n\n\n\n\n\n\n\n\n\n\n\t\t\tDeveloped BY\n\t\t     Charchil Neupane"); sleep(1 * 4);
    printf("\n\n\n\n\n\n\n\n\n\n\n\t\t\t\tROLL NO\n\t\t\t\t      12"); sleep(1 * 4);
    printf("\n\n\n\n\n\n\n\n\n\n\n\t\t\t\tSECTION\n\t\t\t          M11"); sleep(1 * 4);
    printf("\n\n\n\n\n\n\n\n\n\n\n\t\t\t\tINSTITUTE:Kathmandu Model College");
    printf("\n\n\n\n\n\n\n\n\n\n\n\t\t\t\tSUBMITTED TO:Computer Department"); sleep(2);
    system(CLEAR_SCREEN); puts("\n\n"); }

const char PX = 'X';
const char PO = 'O';

int freeSpaceCheck() {
    int freeSpaces = 9;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] != ' ') {
                freeSpaces--; }
        } }
    return freeSpaces; }

void playerMoveFriend(char currentPlayer) {
    int x, y;
    printf("Player %c, enter row #(1-3): ", currentPlayer);
    scanf("%d", &x); x--;
    printf("Player %c, enter column #(1-3): ", currentPlayer);
    scanf("%d", &y); y--;
    do {
        if (board[x][y] != ' '){
            printf("Invalid move, try again.\n");
            printBoard();
            playerMoveFriend(currentPlayer);
        }
        else{
            board[x][y] = currentPlayer;
            break;
        }

    } while (board[x][y] == ' ');
}

char checkWinnerFriend(){
    for (int i = 0; i < 3; i++){
        if (board[i][0] == board[i][1] && board[i][0] == board[i][2]){
            return board[i][0];
        }
    }

    for (int i = 0; i < 3; i++){
        if (board[0][i] == board[1][i] && board[0][i] == board[2][i]){
            return board[0][i];
        }
    }

    if (board[0][0] == board[1][1] && board[0][0] == board[2][2]){
        return board[0][0];
    }

    if (board[0][2] == board[1][1] && board[0][2] == board[2][0]) {
        return board[0][2];
    }

    return ' '; }

void printWinnerFriend(char winner) {
    if (winner == PX) {
        printf("Player X Wins!\n");
    }
    else if (winner == PO) {
        printf("Player O Wins!\n");
    }
    else {
        printf("It's a tie!\n");
    }
}

int comp() {
    char winner = ' ', response;//initially null winner 
    credits();
    do {
        winner = ' ';
        response = ' ';
        resetBoard();
        while (winner == ' ' && checkFreeSpaces() != 0){//when no winner is decleard and there is free space available in the board 
            printBoard();
            playerMove();
            winner = checkWinner();
            if (winner != ' ' || checkFreeSpaces() == 0){
                break;
            }
            printBoard();
            computerMove();
            winner = checkWinner();
            if (winner != ' ' || checkFreeSpaces() == 0){
                break;
            }
        }
        printBoard();
        printWinner(winner);
        printf("\nDo you want to play again? (Y/N)\n");
        scanf(" %c", &response);
        if (response == 'Y' || response == 'y'){
            system(CLEAR_SCREEN);
        }
    } while (response == 'Y' || response == 'y');
    return 0;
}
void Friends() {
    char winner = ' ';
    char response;
    credits();
    do {
        winner = ' ';
        response = ' ';
       resetBoard();
        while (winner == ' ' && freeSpaceCheck() != 0) {
            printBoard();
            playerMoveFriend(PX);
            winner = checkWinnerFriend();
            if (winner != ' ' || freeSpaceCheck() == 0) {
                break;
            }
            printBoard();
            playerMoveFriend(PO);
            winner = checkWinnerFriend(); 
            if (winner != ' ' || freeSpaceCheck() == 0) {
                break;
            }
        }
        printBoard();
        printWinnerFriend(winner);
        printf("\nDo you want to play again? (Y/N)\n");
        scanf(" %c", &response);
        if (response == 'Y' || response == 'y'){
            system(CLEAR_SCREEN);
        }
    } while (response == 'Y' || response == 'y');
}
int main() {
    puts("\n\n");
    char c;
    printf("Play against computer or friend (if you have any :-)) (C/F)\n");
    scanf(" %c", &c);
    if (c == 'C' || c == 'c'){
        comp();
    }
    else if (c == 'F' || c == 'f'){
        Friends();
    }
    return 0; }
